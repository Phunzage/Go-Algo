// 移除元素
// 给定一个数组 nums 和一个数值 val，将数组中所有等于 val 的元素删除，并返回剩余的元素个数。

// 思路：
// 这里数组的删除并不是真的删除，只是将删除的元素移动到数组后面的空间内，然后返回数组除去最后面的 val 数值
// 剩余有效元素的个数
package leetcode

// 传入数组和 val 值，返回剩余元素个数 int 类型
func removeElement(nums []int, val int) int {
	// 如果数组为空，直接返回 0
	if len(nums) == 0 {
		return 0
	}
	// 双指针，一个指向数组头部，一个指向数组尾部
	l, r := 0, len(nums)-1
	// 遍历数组，l 指针从左往右，r 指针从右往左
	for l < r {
		// 如果 l 指针在 r 指针的左边，并且 l 指向的值不等于 val ，l 指针向右移动一位
		for l < r && nums[l] != val {
			l++
		}
		// 如果 r 指针在 l 指针右边，并且 r 指向的值等于 val ，r 指针向左移动一位
		for l < r && nums[r] == val {
			r--
		}
		// 此时，l 在 r 左边，l 指向一个 val ，而且 r 指向一个非 val 值，将两者互换（val值放到了数组后面）
		if l < r {
			nums[l], nums[r] = nums[r], nums[l]
		}
	}
	// 退出循环的条件是 l 不小于 r（即 l 和 r 指向同一个值）
	// 此时，如果 l（和 r ） 指向的值恰好是 val 数值，则返回数值+1，若不是则直接返回 l 的值
	// 如 0, 1, 2, 3, 3经处理后是0, 1, 3, 3(l, r), 2，此时l的值（下标）为3，则返回有效元素的个数为3+1=4，
	// 如果0, 1, 2, 2, 3经处理后是0, 1, 3, 2(l, r), 2，此时 l 的值（下标）为3，返回3
	if nums[l] == val {
		return l
	}
	return l + 1
}
